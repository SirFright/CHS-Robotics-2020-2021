package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

@Autonomous(name="AutonomousTesting")

public class AutoB extends LinearOpMode {

    // Declare OpMode members
    HardwarePushbotMechanum robot   = new HardwarePushbotMechanum();
    private ElapsedTime     runtime = new ElapsedTime();

    static final double     COUNTS_PER_MOTOR_REV    = 4 ;    // eg: TETRIX Motor Encoder
    static final double     DRIVE_GEAR_REDUCTION    = 72.0 ;     // This is < 1.0 if geared UP
    static final double     WHEEL_DIAMETER_INCHES   = 3.0 ;     // For figuring circumference
    static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
                                                      (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double     driveSpeed             = 1;
    static final double     turnSpeed              = 0.5;

    @Override
    public void runOpMode() {
//Initalize variables, done in init function
        robot.initalizeHardwareMap(hardwareMap);

        // Send telemetry message to signify robot waiting;
        telemetry.addData("Status", "Resetting Encoders");
        telemetry.update();

        // Reset encoders
        robot.motorFrontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.motorFrontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.motorBackLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.motorBackRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        // Start using encoders
        robot.motorFrontLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.motorFrontRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.motorBackLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.motorBackRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        /*// Send telemetry message to indicate successful Encoder reset
        telemetry.addData("Path0",  "Starting at %7d,%7d : %7d, %7d",
                          robot.motorFrontLeft.getCurrentPosition(),
                          robot.motorFrontRight.getCurrentPosition(),
                          robot.motorBackLeft.getCurrentPosition(),
                          robot.motorBackRight.getCurrentPosition());
        telemetry.update();*/


        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // Note: Reverse movement is obtained by setting a negative distance (not speed)
        encoderDrive(driveSpeed,  48,  48, 5);  // S1: Forward 47 Inches with 5 Sec timeout
        sleep(1000); 
        encoderDrive(driveSpeed,   12, -12, 4);  // S2: Turn Right 12 Inches with 4 Sec timeout
        sleep(1000);         
        //encoderDrive(driveSpeed, -24, -24, 4.0);  // S3: Reverse 24 Inches with 4 Sec timeout



        telemetry.addData("Path", "Complete");
        telemetry.update();
    }

    /*
     *  Method to perform a relative move, based on encoder counts.
     *  Encoders are not reset as the move is based on the current position.
     *  Move will stop if any of three conditions occur:
     *  1) Move gets to the desired position
     *  2) Move runs out of time
     *  3) Driver stops the opmode running.
     */
     
    public void encoderDrive(double speed, double leftInches, double rightInches, double timeoutS) {
        int newFrontLeftTarget;
        int newFrontRightTarget;
        int newBackLeftTarget;
        int newBackRightTarget;

        if (opModeIsActive()) {
            //Calculate new target
            newFrontLeftTarget = robot.motorFrontLeft.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newFrontRightTarget = robot.motorFrontRight.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
            newBackLeftTarget = robot.motorBackLeft.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newBackRightTarget = robot.motorBackRight.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
            
            //Set new target
            robot.motorFrontLeft.setTargetPosition(newFrontLeftTarget);
            robot.motorBackRight.setTargetPosition(newBackRightTarget);
            robot.motorFrontRight.setTargetPosition(newFrontRightTarget);
            robot.motorBackLeft.setTargetPosition(newBackLeftTarget);
            
            
            // Turn On RUN_TO_POSITION
            robot.motorFrontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            robot.motorFrontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            robot.motorBackLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            robot.motorBackRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);            

            // Reset the timeout time and start motion.
            runtime.reset();
            robot.motorFrontLeft.setPower(Math.abs(speed));
            robot.motorFrontRight.setPower(Math.abs(speed));
            robot.motorBackLeft.setPower(Math.abs(speed));
            robot.motorBackRight.setPower(Math.abs(speed));            

            // Stop all motion;
            //robot.motorFrontLeft.setPower(0);
            //robot.motorFrontRight.setPower(0);
            //robot.motorBackLeft.setPower(0);
            //robot.motorBackRight.setPower(0); 

            // Turn off RUN_TO_POSITION
            //robot.motorFrontLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            //robot.motorFrontRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            //robot.motorBackLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            //robot.motorBackRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER); 
        }
    }
}
